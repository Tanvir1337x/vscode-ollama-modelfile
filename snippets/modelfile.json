{
  "From Statement": {
    "prefix": "from",
    "body": ["FROM $1"],
    "description": "Defines the base model to use."
  },
  "Adapter Statement": {
    "prefix": "adapter",
    "body": ["ADAPTER $1"],
    "description": "Defines the (Q)LoRA adapters to apply to the model."
  },
  "Template Block": {
    "prefix": "template",
    "body": ["TEMPLATE \"\"\"$1\"\"\""],
    "description": "The full prompt template to be sent to the model."
  },
  "System Block": {
    "prefix": "system",
    "body": ["SYSTEM \"\"\"$1\"\"\""],
    "description": "Specifies the system message that will be set in the template."
  },
  "License Block": {
    "prefix": "license",
    "body": ["LICENSE \"\"\"$1\"\"\""],
    "description": "Specifies the legal license."
  },
  "Parameter": {
    "prefix": "param",
    "body": ["PARAMETER $1 $2"],
    "description": "Sets the parameters for how Ollama will run the model."
  },
  "Message": {
    "prefix": "message",
    "body": ["MESSAGE $1 $2"],
    "description": "Specify message history."
  },
  "Template ChatML": {
    "description": "Specify ChatML Template",
    "prefix": ["template chatml"],
    "body": [
      "TEMPLATE \"\"\" {{ if .System }}<|im_start|>system",
      "{{ .System }}<|im_end|>",
      "{{ end }}",
      "{{ if .Prompt }}<|im_start|>user",
      "{{ .Prompt }}<|im_end|>",
      "{{ end }}",
      "<|im_start|>assistant",
      "\"\"\"",
      "",
      "# Common ChatML Stop Tokens, Set these as per your models requirements",
      "PARAMETER stop \"<|system|>\"",
      "PARAMETER stop \"<|user|>\"",
      "PARAMETER stop \"<|assistant|>\"",
      "PARAMETER stop \"</s>\"",
      "PARAMETER stop \"<|endoftext|>\"",
      "PARAMETER stop \"<|im_start|>\"",
      "PARAMETER stop \"<|im_end|>\"",
      "PARAMETER stop \"<|im_done|>\"",
      "PARAMETER stop \"<|eot_id|>\""
    ]
  },
  "Template Llama2": {
    "description": "Specify Llama2 Template",
    "prefix": ["template llama2"],
    "body": [
      "[INST] <<SYS>>{{ .System }}<</SYS>>",
      "",
      "{{ .Prompt }} [/INST]",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\"",
      "PARAMETER stop \"<<SYS>>\"",
      "PARAMETER stop \"<</SYS>>\""
    ]
  },
  "Template Llama3": {
    "description": "Specify Llama3 Template",
    "prefix": ["template llama3"],
    "body": [
      "TEMPLATE \"\"\"{{ if .System }}<|start_header_id|>system<|end_header_id|>",
      "",
      "{{ .System }}<|eot_id|>{{ end }}{{ if .Prompt }}<|start_header_id|>user<|end_header_id|>",
      "",
      "{{ .Prompt }}<|eot_id|>{{ end }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ .Response }}<|eot_id|>",
      "\"\"\"",
      "",
      "PARAMETER stop \"<|start_header_id|>\"",
      "PARAMETER stop \"<|end_header_id|>\"",
      "PARAMETER stop \"<|eot_id|>\""
    ]
  },
  "Template Llama3.1": {
    "description": "Specify Llama3.1 Template",
    "prefix": ["template llama3.1"],
    "body": [
      "{{ if .Messages }}",
      "{{- if or .System .Tools }}<|start_header_id|>system<|end_header_id|>",
      "{{- if .System }}",
      "",
      "{{ .System }}",
      "{{- end }}",
      "{{- if .Tools }}",
      "",
      "You are a helpful assistant with tool calling capabilities. When you receive a tool call response, use the output to format an answer to the orginal use question.",
      "{{- end }}",
      "{{- end }}<|eot_id|>",
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 }}",
      "{{- if eq .Role \"user\" }}<|start_header_id|>user<|end_header_id|>",
      "{{- if and $.Tools $last }}",
      "",
      "Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.",
      "",
      "Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}. Do not use variables.",
      "",
      "{{ $.Tools }}",
      "{{- end }}",
      "",
      "{{ .Content }}<|eot_id|>{{ if $last }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- else if eq .Role \"assistant\" }}<|start_header_id|>assistant<|end_header_id|>",
      "{{- if .ToolCalls }}",
      "",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"parameters\": {{ .Function.Arguments }}}{{ end }}",
      "{{- else }}",
      "",
      "{{ .Content }}{{ if not $last }}<|eot_id|>{{ end }}",
      "{{- end }}",
      "{{- else if eq .Role \"tool\" }}<|start_header_id|>ipython<|end_header_id|>",
      "",
      "{{ .Content }}<|eot_id|>{{ if $last }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- end }}",
      "{{- end }}",
      "{{- else }}",
      "{{- if .System }}<|start_header_id|>system<|end_header_id|>",
      "",
      "{{ .System }}<|eot_id|>{{ end }}{{ if .Prompt }}<|start_header_id|>user<|end_header_id|>",
      "",
      "{{ .Prompt }}<|eot_id|>{{ end }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}{{ .Response }}{{ if .Response }}<|eot_id|>{{ end }}"
    ]
  },
  "Template Llama3.2": {
    "description": "Specify Llama3.2 Template",
    "prefix": ["template llama3.2"],
    "body": [
      "<|start_header_id|>system<|end_header_id|>",
      "",
      "Cutting Knowledge Date: December 2023",
      "",
      "{{ if .System }}{{ .System }}",
      "{{- end }}",
      "{{- if .Tools }}When you receive a tool call response, use the output to format an answer to the orginal user question.",
      "",
      "You are a helpful assistant with tool calling capabilities.",
      "{{- end }}<|eot_id|>",
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 }}",
      "{{- if eq .Role \"user\" }}<|start_header_id|>user<|end_header_id|>",
      "{{- if and $.Tools $last }}",
      "",
      "Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.",
      "",
      "Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}. Do not use variables.",
      "",
      "{{ range $.Tools }}",
      "{{- . }}",
      "{{ end }}",
      "{{ .Content }}<|eot_id|>",
      "{{- else }}",
      "",
      "{{ .Content }}<|eot_id|>",
      "{{- end }}{{ if $last }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- else if eq .Role \"assistant\" }}<|start_header_id|>assistant<|end_header_id|>",
      "{{- if .ToolCalls }}",
      "{{ range .ToolCalls }}",
      "{\"name\": \"{{ .Function.Name }}\", \"parameters\": {{ .Function.Arguments }}}{{ end }}",
      "{{- else }}",
      "",
      "{{ .Content }}",
      "{{- end }}{{ if not $last }}<|eot_id|>{{ end }}",
      "{{- else if eq .Role \"tool\" }}<|start_header_id|>ipython<|end_header_id|>",
      "",
      "{{ .Content }}<|eot_id|>{{ if $last }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- end }}",
      "{{- end }}",
      "",
      "PARAMETER stop \"<|start_header_id|>\"",
      "PARAMETER stop \"<|end_header_id|>\"",
      "PARAMETER stop \"<|eot_id|>\""
    ]
  },
  "Template Llama3.2 Vision": {
    "description": "Specify Llama3.2 Vision Template",
    "prefix": ["template llama3.2 vision"],
    "body": [
      "{{- range $index, $_ := .Messages }}<|start_header_id|>{{ .Role }}<|end_header_id|>",
      "",
      "{{ .Content }}",
      "{{- if gt (len (slice $.Messages $index)) 1 }}<|eot_id|>",
      "{{- else if ne .Role \"assistant\" }}<|eot_id|><|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- end }}"
    ]
  },
  "Template Llama-Guard3": {
    "description": "Specify Llama-Guard3 Template",
    "prefix": ["template llama-guard3"],
    "body": [
      "{{- $lastIndex := (len (slice .Messages 1)) }}",
      "{{- $last := index .Messages $lastIndex }}",
      "{{- $role := \"\"}}",
      "{{- if eq $last.Role \"user\" }}",
      "{{- $role = \"User\" }}",
      "{{- else }}",
      "{{- $role = \"Agent\" }}",
      "{{- end }}<|start_header_id|>user<|end_header_id|>",
      "",
      "Task: Check if there is unsafe content in '{{ $role }}' messages in conversations according our safety policy with the below categories.",
      "",
      "<BEGIN UNSAFE CONTENT CATEGORIES>",
      "S1: Violent Crimes.",
      "S2: Non-Violent Crimes.",
      "S3: Sex Crimes.",
      "S4: Child Exploitation.",
      "S5: Defamation.",
      "S6: Specialized Advice.",
      "S7: Privacy.",
      "S8: Intellectual Property.",
      "S9: Indiscriminate Weapons.",
      "S10: Hate.",
      "S11: Self-Harm.",
      "S12: Sexual Content.",
      "S13: Elections.",
      "S14: Code Interpreter Abuse.",
      "<END UNSAFE CONTENT CATEGORIES>",
      "",
      "<BEGIN CONVERSATION>",
      "",
      "{{ range .Messages }}",
      "{{- if eq .Role \"user\" }}User: {{ .Content }}",
      "",
      "{{ else }}Agent: {{ .Content }}",
      "",
      "{{ end }}",
      "{{- end }}<END CONVERSATION>",
      "",
      "Provide your safety assessment for ONLY THE LAST User message in the above conversation:",
      " - First line must read 'safe' or 'unsafe'.",
      " - If unsafe, a second line must include a comma-separated list of violated categories.<|eot_id|><|start_header_id|>assistant<|end_header_id|>",
      "",
      "PARAMETER temperature 0"
    ]
  },
  "Template Phi2": {
    "description": "Specify Phi2 Template",
    "prefix": ["template phi2"],
    "body": [
      "{{ if .System }}System: {{ .System }}{{ end }}",
      "User: {{ .Prompt }}",
      "Assistant:",
      "",
      "PARAMETER stop \"User:\"",
      "PARAMETER stop \"Assistant:\"",
      "PARAMETER stop \"System:\""
    ]
  },
  "Template Phi3": {
    "description": "Specify Phi3 Template",
    "prefix": ["template phi3"],
    "body": [
      "TEMPLATE \"\"\"{{ if .System }}<|system|>",
      "{{ .System }}<|end|>",
      "{{ end }}{{ if .Prompt }}<|user|>",
      "{{ .Prompt }}<|end|>",
      "{{ end }}<|assistant|>",
      "{{ .Response }}<|end|>",
      "\"\"\"",
      "",
      "PARAMETER stop \"<|user|>\"",
      "PARAMETER stop \"<|assistant|>\"",
      "PARAMETER stop \"<|system|>\"",
      "PARAMETER stop \"<|end|>\"",
      "PARAMETER stop \"<|endoftext|>\""
    ]
  },
  "Template Phi3.5": {
    "description": "Specify Phi3.5 Template",
    "prefix": ["template phi3.5"],
    "body": [
      "TEMPLATE \"\"\"{{ if .System }}<|system|>",
      "{{ .System }}<|end|>",
      "{{ end }}{{ if .Prompt }}<|user|>",
      "{{ .Prompt }}<|end|>",
      "{{ end }}<|assistant|>",
      "{{ .Response }}<|end|>",
      "\"\"\"",
      "",
      "PARAMETER stop \"<|system|>\"",
      "PARAMETER stop \"<|user|>\"",
      "PARAMETER stop \"<|end|>\"",
      "PARAMETER stop \"<|assistant|>\""
    ]
  },
  "Template Gemma": {
    "description": "Specify Gemma Template",
    "prefix": ["template gemma"],
    "body": [
      "<start_of_turn>user",
      "{{ if .System }}{{ .System }} {{ end }}{{ .Prompt }}<end_of_turn>",
      "<start_of_turn>model",
      "{{ .Response }}<end_of_turn>",
      "",
      "PARAMETER stop \"<start_of_turn>\"",
      "PARAMETER stop \"<end_of_turn>\"",
      "PARAMETER penalize_newline \"false\"",
      "PARAMETER repeat_penalty \"1\""
    ]
  },
  "Template Gemma2": {
    "description": "Specify Gemma2 Template",
    "prefix": ["template gemma2"],
    "body": [
      "<start_of_turn>user",
      "{{ if .System }}{{ .System }} {{ end }}{{ .Prompt }}<end_of_turn>",
      "<start_of_turn>model",
      "{{ .Response }}<end_of_turn>",
      "",
      "PARAMETER stop \"<start_of_turn>\"",
      "PARAMETER stop \"<end_of_turn>\""
    ]
  },
  "Template Codegemma": {
    "description": "Specify Codegemma Template",
    "prefix": ["template codegemma"],
    "body": [
      "<start_of_turn>user",
      "{{ if .System }}{{ .System }} {{ end }}{{ .Prompt }}<end_of_turn>",
      "<start_of_turn>model",
      "{{ .Response }}<end_of_turn>",
      "",
      "PARAMETER stop \"<start_of_turn>\"",
      "PARAMETER stop \"<end_of_turn>\""
    ]
  },
  "Template Shieldgemma": {
    "description": "Specify Shieldgemma Template",
    "prefix": ["template shieldgemma"],
    "body": [
      "{{- $hq := \"\" }}",
      "{{- $cr := \"\" }}",
      "{{- range $i, $m := .Messages }}",
      "{{- if eq .Role \"user\" }}",
      "{{- $hq = $m.Content }}",
      "{{- else if eq .Role \"assistant\" }}",
      "{{- if (eq $i (len (slice $.Messages 1))) }}",
      "{{- $cr = $m.Content }}",
      "{{- end }}",
      "{{- end }}",
      "{{- end }}You are a policy expert trying to help determine whether an AI response to a prompt is in violation of the defined safety policies.",
      "",
      "<start_of_turn>",
      "Human Question: {{ $hq }}",
      "<end_of_turn>",
      "{{- if $cr }}",
      "<start_of_turn>",
      "Chatbot Response: {{ $cr }}",
      "<end_of_turn>",
      "{{- end }}",
      "",
      "Our safety principle is defined in the below:",
      "",
      "{{ if $cr }}* \"No Dangerous Content\": The chatbot shall not generate content that harming oneself and/or others (e.g., accessing or building firearms and explosive devices, promotion of terrorism, instructions for suicide).",
      "* \"No Harassment\": The chatbot shall not generate content that is malicious, intimidating, bullying, or abusive content targeting another individual (e.g., physical threats, denial of tragic events, disparaging victims of violence).",
      "* \"No Hate Speech\": The chatbot shall not generate content that targeting identity and/or protected attributes (e.g., racial slurs, promotion of discrimination, calls to violence against protected groups) or dehumanizing/belittling/vilifying on the basis of race, ethnicity, religion, disability, age, nationality, veteran status, sexual orientation, gender, gender identity, caste, or any other protected status. We do allow content that includes a reference to a protected individual or group in a positive manner.",
      "* \"No Sexually Explicit Information\": The chatbot shall not generate content that contains references to sexual acts or other lewd content (e.g., sexually graphic descriptions, content aimed at causing arousal). Medical or scientific terms related to human anatomy or sex education are permitted.",
      "{{- else }}* \"No Dangerous Content\": The prompt shall not contain or seek generation of content that harming oneself and/or others (e.g., accessing or building firearms and explosive devices, promotion of terrorism, instructions for suicide).",
      "* \"No Harassment\": The prompt shall not contain or seek generation of content that is malicious, intimidating, bullying, or abusive content targeting another individual (e.g., physical threats, denial of tragic events, disparaging victims of violence).",
      "* \"No Hate Speech\": The prompt shall not contain or seek generation of content that targeting identity and/or protected attributes (e.g., racial slurs, promotion of discrimination, calls to violence against protected groups) or dehumanizing/belittling/vilifying on the basis of race, ethnicity, religion, disability, age, nationality, veteran status, sexual orientation, gender, gender identity, caste, or any other protected status. We do allow content that includes a reference to a protected individual or group in a positive manner.",
      "* \"No Sexually Explicit Information\": The prompt shall not contain or seek generation of content that contains references to sexual acts or other lewd content (e.g., sexually graphic descriptions, content aimed at causing arousal). Medical or scientific terms related to human anatomy or sex education are permitted.",
      "{{- end }}",
      "",
      "===",
      "",
      "Does the {{ if $cr }}chatbot response{{ else }}human question{{ end }} violate the above principle? Your answer must start with 'Yes' or 'No'. And then walk through step by step to be sure we answer correctly.",
      "",
      "PARAMETER temperature 0"
    ]
  },
  "Template Mistral-Nemo": {
    "description": "Specify Mistral-Nemo Template",
    "prefix": ["template mistral-nemo"],
    "body": [
      "{{- range $i, $_ := .Messages }}",
      "{{- if eq .Role \"user\" }}",
      "{{- if and $.Tools (le (len (slice $.Messages $i)) 2) }}[AVAILABLE_TOOLS] {{ $.Tools }}[/AVAILABLE_TOOLS]",
      "{{- end }}[INST] {{ if and $.System (eq (len (slice $.Messages $i)) 1) }}{{ $.System }}",
      "{{ end }}{{ .Content }}[/INST]",
      "{{- else if eq .Role \"assistant\" }}",
      "{{- if .Content }} {{ .Content }}{{ if not (eq (len (slice $.Messages $i)) 1) }}</s>{{ end }}",
      "{{- else if .ToolCalls }}[TOOL_CALLS] [",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}",
      "{{- end }}]",
      "{{- end }}",
      "{{- else if eq .Role \"tool\" }}[TOOL_RESULTS] {\"content\": {{ .Content }}} [/TOOL_RESULTS]",
      "{{- end }}",
      "{{- end }}",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\""
    ]
  },
  "Template Mixtral": {
    "description": "Specify Mixtral Template",
    "prefix": ["template mixtral"],
    "body": [
      "[INST] {{ if .System }}{{ .System }} {{ end }}{{ .Prompt }} [/INST]",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\""
    ]
  },
  "Template Codegemma": {
    "description": "Specify Codegemma Template",
    "prefix": ["template codegemma"],
    "body": [
      "<start_of_turn>user",
      "{{ if .System }}{{ .System }} {{ end }}{{ .Prompt }}<end_of_turn>",
      "<start_of_turn>model",
      "{{ .Response }}<end_of_turn>",
      "",
      "PARAMETER penalize_newline false",
      "PARAMETER repeat_penalty 1",
      "PARAMETER stop \"<start_of_turn>\"",
      "PARAMETER stop \"<end_of_turn>\""
    ]
  },
  "Template Mistral 0.1": {
    "description": "Specify Mistral 0.1 Template",
    "prefix": ["template mistral-0.1"],
    "body": [
      "[INST] {{ .System }} {{ .Prompt }} [/INST]",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\""
    ]
  },
  "Template Mistral 0.2": {
    "description": "Specify Mistral 0.2 Template",
    "prefix": ["template mistral-0.2"],
    "body": [
      "[INST] {{ .System }} {{ .Prompt }} [/INST]",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\""
    ]
  },
  "Template Mistral 0.3": {
    "description": "Specify Mistral 0.3 Template",
    "prefix": ["template mistral-0.3"],
    "body": [
      "{{- if .Messages }}",
      "{{- range $index, $_ := .Messages }}",
      "{{- if eq .Role \"user\" }}",
      "{{- if and (eq (len (slice $.Messages $index)) 1) $.Tools }}[AVAILABLE_TOOLS] {{ $.Tools }}[/AVAILABLE_TOOLS]",
      "{{- end }}[INST] {{ if and $.System (eq (len (slice $.Messages $index)) 1) }}{{ $.System }}",
      "",
      "{{ end }}{{ .Content }}[/INST]",
      "{{- else if eq .Role \"assistant\" }}",
      "{{- if .Content }} {{ .Content }}",
      "{{- else if .ToolCalls }}[TOOL_CALLS] [",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}}",
      "{{- end }}]",
      "{{- end }}</s>",
      "{{- else if eq .Role \"tool\" }}[TOOL_RESULTS] {\"content\": {{ .Content }}} [/TOOL_RESULTS]",
      "{{- end }}",
      "{{- end }}",
      "{{- else }}[INST] {{ if .System }}{{ .System }}",
      "",
      "{{ end }}{{ .Prompt }}[/INST]",
      "{{- end }} {{ .Response }}",
      "{{- if .Response }}</s>",
      "{{- end }}",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\""
    ]
  },
  "Template Mistral Small": {
    "description": "Specify Mistral Small Template",
    "prefix": ["template mistral-small"],
    "body": [
      "{{- if .Messages }}",
      "{{- range $index, $_ := .Messages }}",
      "{{- if eq .Role \"user\" }}",
      "{{- if and (le (len (slice $.Messages $index)) 2) $.Tools }}[AVAILABLE_TOOLS] {{ $.Tools }}[/AVAILABLE_TOOLS]",
      "{{- end }} [INST] {{ if and $.System (eq (len (slice $.Messages $index)) 1) }}{{ $.System }}",
      "",
      "{{ end }}{{ .Content }} [/INST]",
      "{{- else if eq .Role \"assistant\" }}",
      "{{- if .Content }} {{ .Content }}",
      "{{- if not (eq (len (slice $.Messages $index)) 1) }}</s>",
      "{{- end }}",
      "{{- else if .ToolCalls }}[TOOL_CALLS] [",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}}",
      "{{- end }}]</s>",
      "{{- end }}",
      "{{- else if eq .Role \"tool\" }}[TOOL_RESULTS] {\"content\": {{ .Content }}}[/TOOL_RESULTS]",
      "{{- end }}",
      "{{- end }}",
      "{{- else }} [INST] {{ if .System }}{{ .System }}",
      "",
      "{{ end }}{{ .Prompt }} [/INST]",
      "{{- end }}",
      "{{- if .Response }} {{ end }}{{ .Response }}",
      "{{- if .Response }}</s> {{ end }}",
      "",
      "PARAMETER stop \"[INST]\"",
      "PARAMETER stop \"[/INST]\"",
      "PARAMETER stop \"</s>\""
    ]
  },
  "Template Command-R": {
    "description": "Specify Command-R Template",
    "prefix": ["template command-r"],
    "body": [
      "{{ if .System }}<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>{{ .System }}<|END_OF_TURN_TOKEN|>{{ end }}{{ if .Prompt }}<|START_OF_TURN_TOKEN|><|USER_TOKEN|>{{ .Prompt }}<|END_OF_TURN_TOKEN|}}{{ end }}<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>{{ .Response }}<|END_OF_TURN_TOKEN|>",
      "",
      "PARAMETER stop \"<|START_OF_TURN_TOKEN|>\"",
      "PARAMETER stop \"<|END_OF_TURN_TOKEN|>\""
    ]
  },
  "Template Command-R-Plus": {
    "description": "Specify Command-R-Plus Template",
    "prefix": ["template command-r-plus"],
    "body": [
      "{{- if or .Tools .System }}<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>",
      "{{- if .Tools }}# Safety Preamble",
      "The instructions in this section override those in the task description and style guide sections. Don't answer questions that are harmful or immoral.",
      "",
      "# System Preamble",
      "## Basic Rules",
      "You are a powerful conversational AI trained by Cohere to help people. You are augmented by a number of tools, and your job is to use and consume the output of these tools to best help the user. You will see a conversation history between yourself and a user, ending with an utterance from the user. You will then see a specific instruction instructing you what kind of response to generate. When you answer the user's requests, you cite your sources in your answers, according to those instructions.",
      "",
      "{{ if .System }}# User Preamble",
      "{{ .System }}",
      "{{- end }}",
      "",
      "## Available Tools",
      "Here is a list of tools that you have available to you:",
      "{{- range .Tools }}",
      "",
      "```python",
      "def {{ .Function.Name }}(",
      "{{- range $name, $property := .Function.Parameters.Properties }}{{ $name }}: {{ $property.Type }}, {{ end }}) -> List[Dict]:",
      "    '''{{ .Function.Description }}",
      "",
      "{{- if .Function.Parameters.Properties }}",
      "",
      "    Args:",
      "{{- range $name, $property := .Function.Parameters.Properties }}",
      "        {{ $name }} ({{ $property.Type }}): {{ $property.Description }}",
      "{{- end }}",
      "{{- end }}",
      "    '''",
      "    pass",
      "```",
      "{{- end }}",
      "{{- else if .System }}{{ .System }}",
      "{{- end }}<|END_OF_TURN_TOKEN|>",
      "{{- end }}",
      "{{- range .Messages }}",
      "{{- if eq .Role \"system\" }}",
      "{{- continue }}",
      "{{- end }}<|START_OF_TURN_TOKEN|>",
      "{{- if eq .Role \"user\" }}<|USER_TOKEN|>{{ .Content }}",
      "{{- else if eq .Role \"assistant\" }}<|CHATBOT_TOKEN|>",
      "{{- if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}",
      "Action: ```json",
      "[",
      "{{- range .ToolCalls }}",
      "    {",
      "        \"tool_name\": \"{{ .Function.Name }}\",",
      "        \"parameters\": {{ .Function.Arguments }}",
      "    }",
      "{{- end }}",
      "]```",
      "{{ continue }}",
      "{{ end }}",
      "{{- else if eq .Role \"tool\" }}<|SYSTEM_TOKEN|><results>",
      "{{ .Content }}</results>",
      "{{- end }}<|END_OF_TURN_TOKEN|>",
      "{{- end }}",
      "{{- if .Tools }}<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>Write 'Action:' followed by a json-formatted list of actions that you want to perform in order to produce a good response to the user's last input. You can use any of the supplied tools any number of times, but you should aim to execute the minimum number of necessary actions for the input. You should use the `directly-answer` tool if calling the other tools is unnecessary. The list of actions you want to call should be formatted as a list of json objects, for example:",
      "```json",
      "[",
      "    {",
      "        \"tool_name\": title of the tool in the specification,",
      "        \"parameters\": a dict of parameters to input into the tool as they are defined in the specs, or {} if it takes no parameters",
      "    }",
      "]```",
      "{{- end }}<|END_OF_TURN_TOKEN|><|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>",
      "",
      "PARAMETER stop \"<|START_OF_TURN_TOKEN|>\"",
      "PARAMETER stop \"<|END_OF_TURN_TOKEN|>\""
    ]
  },
  "Template Nemotron": {
    "description": "Specify Nemotron Template",
    "prefix": ["template nemotron"],
    "body": [
      "<|start_header_id|>system<|end_header_id|>",
      "",
      "{{ if .Tools }}You have access to the following functions. To call a function, please respond with JSON for a function call. Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}. Do not use variables.",
      "",
      "{{ range .Tools }}{{ . }}",
      "",
      "{{ end }}",
      "{{- end }}{{ .System }}<|eot_id|>",
      "{{- range $i, $_ := .Messages }}",
      "{{- $isLastMessage := eq (len (slice $.Messages $i)) 1 -}}",
      "{{- if eq .Role \"system\" }}",
      "{{- else if eq .Role \"assistant\" }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"parameters\": {{ .Function.Arguments }} }",
      "{{- end }}",
      "{{- end }}",
      "{{- if not $isLastMessage }}<|eot_id|>",
      "{{- end }}",
      "{{- else if eq .Role \"tool\" }}<|start_header_id|>ipython<|end_header_id|>",
      "",
      "{{ .Content }}<|eot_id|>",
      "{{- if $isLastMessage }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- else }}<|start_header_id|>{{ .Role }}<|end_header_id|>",
      "",
      "{{ .Content }}<|eot_id|>",
      "{{- if $isLastMessage }}<|start_header_id|>assistant<|end_header_id|>",
      "",
      "{{ end }}",
      "{{- end }}",
      "{{- end }}",
      "",
      "PARAMETER stop \"<|start_header_id|>\"",
      "PARAMETER stop \"<|end_header_id|>\"",
      "PARAMETER stop \"<|eot_id|>\""
    ]
  },
  "Template Nemotron Mini": {
    "description": "Specify Nemotron Mini Template",
    "prefix": ["template nemotron-mini"],
    "body": [
      "{{- if (or .Tools .System) }}<extra_id_0>System",
      "{{ if .System }}{{ .System }}",
      "",
      "",
      "{{ end }}",
      "{{- if .Tools }}",
      "{{- range .Tools }}<tool> {{ . }} </tool>{{ end }}",
      "",
      "",
      "{{ end }}",
      "{{- end }}",
      "{{- range $i, $m := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 -}}",
      "{{- if eq .Role \"user\" }}<extra_id_1>User",
      "{{ .Content }}",
      "{{- if $last }}",
      "<extra_id_1>Assistant",
      "{{- end }}",
      "{{ else if eq .Role \"tool\" }}<extra_id_1>Tool",
      "{{ .Content }}",
      "{{- if $last }}",
      "<extra_id_1>Assistant",
      "{{- end }}",
      "{{ else if eq .Role \"assistant\" }}<extra_id_1>Assistant",
      "{{- if .ToolCalls }}",
      "{{ range .ToolCalls }}<toolcall> {\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}} </toolcall> {{ end }}",
      "{{ else }}",
      "{{ .Content }}",
      "{{- if not $last }}",
      "{{ end }}",
      "{{- end }}",
      "{{- end }}",
      "{{- end }}"
    ]
  },
  "Template Athene-v2": {
    "description": "Specify Athene v2 Template",
    "prefix": ["template athene-v2"],
    "body": [
      "{{- if .Messages }}",
      "{{- if or .System .Tools }}system",
      "{{- if .System }}",
      "{{ .System }}",
      "{{- end }}",
      "{{- if .Tools }}",
      "",
      "# Tools",
      "",
      "You may call one or more functions to assist with the user query.",
      "",
      "You are provided with function signatures within <tools></tools> XML tags:",
      "<tools>",
      "{{- range .Tools }}",
      "{\"type\": \"function\", \"function\": {{ .Function }}}",
      "{{- end }}",
      "</tools>",
      "",
      "For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:",
      "<tool_call>",
      "{\"name\": <function-name>, \"arguments\": <args-json-object>}",
      "</tool_call>",
      "{{- end }}",
      "{{ end }}",
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 -}}",
      "{{- if eq .Role \"user\" }}user",
      "{{ .Content }}",
      "{{ else if eq .Role \"assistant\" }}assistant",
      "{{ if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}<tool_call>",
      "{{ range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}}",
      "{{ end }}</tool_call>",
      "{{- end }}{{ if not $last }}",
      "{{ end }}",
      "{{- else if eq .Role \"tool\" }}user",
      "<tool_response>",
      "{{ .Content }}",
      "</tool_response>",
      "{{ end }}",
      "{{- if and (ne .Role \"assistant\") $last }}assistant",
      "{{ end }}",
      "{{- end }}",
      "{{- else }}",
      "{{- if .System }}system",
      "{{ .System }}",
      "{{ end }}{{ if .Prompt }}user",
      "{{ .Prompt }}",
      "{{ end }}assistant",
      "{{ end }}{{ .Response }}{{ if .Response }}{{ end }}"
    ]
  },
  "Template Opencoder": {
    "description": "Specify Opencoder Template",
    "prefix": ["template opencoder"],
    "body": [
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 -}}",
      "{{ .Role }}",
      "{{ .Content }}",
      "{{- if not $last }}",
      "{{ else if (ne .Role \"assistant\") }}",
      "assistant",
      "{{ end }}",
      "{{- end }}",
      "",
      "PARAMETER stop \"<|im_start|>\"",
      "PARAMETER stop \"<|im_end|>\"",
      "PARAMETER stop \"<|fim_prefix|>\"",
      "PARAMETER stop \"<|fim_middle|>\"",
      "PARAMETER stop \"<|fim_suffix|>\"",
      "PARAMETER stop \"<|fim_end|>\""
    ]
  },
  "Template Marco-O1": {
    "description": "Specify Marco-O1 Template",
    "prefix": ["template marco-o1"],
    "body": [
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 -}}",
      "{{ .Role }}",
      "{{ .Content }}{{ if not $last }}",
      "{{ end }}",
      "{{- if and (ne .Role \"assistant\") $last }}assistant",
      "{{ end }}",
      "{{- end }}"
    ]
  },
  "Template Tulu3": {
    "description": "Specify Tulu3 Template",
    "prefix": ["template tulu3"],
    "body": [
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 -}}",
      "<|{{ .Role }}|>",
      "{{ .Content }}{{ if not $last }}",
      "{{ end }}",
      "{{- if and (ne .Role \"assistant\") $last }}<|assistant|>",
      "{{ end }}",
      "{{- end }}"
    ]
  },
  "Template Solar-Pro": {
    "description": "Specify Solar-Pro Template",
    "prefix": ["template solar-pro"],
    "body": [
      "{{- range $index, $_ := .Messages }}{{ .Role }}",
      "{{ .Content }}",
      "{{- if eq (len (slice $.Messages $index)) 1 }}",
      "{{- if eq .Role \"user\" }}",
      "assistant",
      "{{ end }}",
      "{{- else }}",
      "{{ end }}",
      "{{- end }}",
      "",
      "PARAMETER stop \"<|im_start|>\"",
      "PARAMETER stop \"<|im_end|>\""
    ]
  },
  "Template Aya-Expanse": {
    "description": "Specify Aya-Expanse Template",
    "prefix": ["template aya-expanse"],
    "body": [
      "{{- if or .Tools .System }}<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>",
      "{{- if .Tools }}# Safety Preamble",
      "The instructions in this section override those in the task description and style guide sections. Don't answer questions that are harmful or immoral.",
      "",
      "# System Preamble",
      "## Basic Rules",
      "You are a powerful conversational AI trained by Cohere to help people. You are augmented by a number of tools, and your job is to use and consume the output of these tools to best help the user. You will see a conversation history between yourself and a user, ending with an utterance from the user. You will then see a specific instruction instructing you what kind of response to generate. When you answer the user's requests, you cite your sources in your answers, according to those instructions.",
      "",
      "{{ if .System }}# User Preamble",
      "{{ .System }}",
      "{{- end }}",
      "",
      "## Available Tools",
      "Here is a list of tools that you have available to you:",
      "{{- range .Tools }}",
      "",
      "```python",
      "def {{ .Function.Name }}(",
      "{{- range $name, $property := .Function.Parameters.Properties }}{{ $name }}: {{ $property.Type }}, {{ end }}) -> List[Dict]:",
      "    '''{{ .Function.Description }}",
      "",
      "{{- if .Function.Parameters.Properties }}",
      "",
      "    Args:",
      "{{- range $name, $property := .Function.Parameters.Properties }}",
      "        {{ $name }} ({{ $property.Type }}): {{ $property.Description }}",
      "{{- end }}",
      "{{- end }}",
      "    '''",
      "    pass",
      "```",
      "{{- end }}",
      "{{- else if .System }}{{ .System }}",
      "{{- end }}<|END_OF_TURN_TOKEN|>",
      "{{- end }}",
      "{{- range .Messages }}",
      "{{- if eq .Role \"system\" }}",
      "{{- continue }}",
      "{{- end }}<|START_OF_TURN_TOKEN|>",
      "{{- if eq .Role \"user\" }}<|USER_TOKEN|>{{ .Content }}",
      "{{- if $.Tools }}<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>Write 'Action:' followed by a json-formatted list of actions that you want to perform in order to produce a good response to the user's last input. You can use any of the supplied tools any number of times, but you should aim to execute the minimum number of necessary actions for the input. You should use the `directly-answer` tool if calling the other tools is unnecessary. The list of actions you want to call should be formatted as a list of json objects, for example:",
      "```json",
      "[",
      "    {",
      "        \"tool_name\": title of the tool in the specification,",
      "        \"parameters\": a dict of parameters to input into the tool as they are defined in the specs, or {} if it takes no parameters",
      "    }",
      "]```",
      "{{- end }}",
      "{{- else if eq .Role \"assistant\" }}<|CHATBOT_TOKEN|>",
      "{{- if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}",
      "Action: ```json",
      "[",
      "{{- range .ToolCalls }}",
      "    {",
      "        \"tool_name\": \"{{ .Function.Name }}\",",
      "        \"parameters\": {{ .Function.Arguments }}",
      "    }",
      "{{- end }}",
      "]```",
      "{{- end }}",
      "{{- else if eq .Role \"tool\" }}<|SYSTEM_TOKEN|><results>",
      "console_output: {{ .Content }}",
      "</results>",
      "{{- end }}<|END_OF_TURN_TOKEN|>",
      "{{- end }}<|END_OF_TURN_TOKEN|><|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>",
      "",
      "PARAMETER stop \"<|START_OF_TURN_TOKEN|>\"",
      "PARAMETER stop \"<|END_OF_TURN_TOKEN|>\""
    ]
  },
  "Template Granite-Code": {
    "description": "Specify Granite-Code Template",
    "prefix": ["template granite-code"],
    "body": [
      "{{ if .Suffix }}<fim_prefix> {{ .Prompt }}<fim_suffix> {{ .Suffix }}<fim_middle>",
      "{{- else if .Messages }}",
      "{{- range $i, $_ := .Messages }}",
      "{{- $last := eq (len (slice $.Messages $i)) 1 }}",
      "{{- if eq .Role \"user\" }}Question:",
      "{{ .Content }}",
      "",
      "{{ if $last }}Answer:",
      "{{ end }}",
      "{{- else if eq .Role \"assistant\" }}Answer:",
      "{{ .Content }}{{ if not $last }}",
      "",
      "{{ end }}",
      "{{- else if eq .Role \"system\" }}System:",
      "{{ .Content }}",
      "",
      "{{ if $last }}Answer:",
      "{{ end }}",
      "{{- end }}",
      "{{- end }}",
      "{{- else }}",
      "{{- if .System }}System:",
      "{{ .System }}",
      "",
      "{{ end }}",
      "{{- if .Prompt }}Question:",
      "{{ .Prompt }}",
      "",
      "{{ end }}",
      "{{- if .Response }}Answer:",
      "{{ .Response }}",
      "",
      "{{ else }}Answer:",
      "{{ end }}",
      "{{- end }}{{ .Response }}",
      "",
      "PARAMETER stop \"System:\"",
      "PARAMETER stop \"Question:\"",
      "PARAMETER stop \"Answer:\""
    ]
  },
  "Template Granite3-MoE": {
    "description": "Specify Granite3-MoE Template",
    "prefix": ["template granite3-moe"],
    "body": [
      "{{- if .Tools }}<|start_of_role|>available_tools<|end_of_role|>",
      "{{- range .Tools }}",
      "{{ . }}",
      "{{ end }}<|end_of_text|>",
      "{{ end }}",
      "{{- range $index, $_ := .Messages }}<|start_of_role|>",
      "{{- if eq .Role \"tool\" }}tool_response",
      "{{- else }}{{ .Role }}",
      "{{- end }}<|end_of_role|>",
      "{{- if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}<|tool_call|>",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}}",
      "{{- end }}",
      "{{- end }}",
      "{{- if eq (len (slice $.Messages $index)) 1 }}",
      "{{- if eq .Role \"assistant\" }}",
      "{{- else }}<|end_of_text|>",
      "<|start_of_role|>assistant<|end_of_role|>",
      "{{- end }}",
      "{{- else }}<|end_of_text|>",
      "{{ end }}",
      "{{- end }}",
      "",
      "PARAMETER num_gpu 23"
    ]
  },
  "Template Granite3-Guardian": {
    "description": "Specify Granite3-Guardian Template",
    "prefix": ["template granite3-guardian"],
    "body": [
      "{{- $primary := \"\" }}",
      "{{- $secondary := \"\" }}",
      "",
      "{{- range $index, $_ := .Messages }}",
      "{{- if eq (len (slice $.Messages $index)) 1 }}",
      "{{- $primary = . }}",
      "{{- else if eq (len (slice $.Messages $index)) 2 }}",
      "{{- $secondary = . }}",
      "{{- end }}",
      "{{- end }}<|start_of_role|>user<|end_of_role|>You are a safety agent trying to help determine",
      "{{- if eq $primary.Role \"user\" }} whether",
      "{{- else if and (eq $primary.Role \"assistant\") (eq .System \"groundedness\") }} if the assistant message",
      "{{- else if eq $primary.Role \"assistant\" }} whether the assistant message to",
      "{{- else if eq $primary.Role \"context\" }} if the context",
      "{{- end }}",
      "{{- if eq .System \"answer_relevance\" }} user message poses a potential harm based on the provided risk definition.",
      "{{- else if eq .System \"groundedness\" }} poses a potential harm based on the provided risk definition and the given context.",
      "{{- else if eq $primary.Role \"context\" }} poses a potential harm based on the provided risk definition and the user message.",
      "{{- else }} the user message is harmful according to the safety risk definition below.",
      "{{- end }}",
      "",
      "<start_of_turn>",
      "{{- if eq $primary.Role \"user\" }}",
      "User Message: {{ $primary.Content }}",
      "{{- else if eq $primary.Role \"assistant\" }}",
      "{{- if eq .System \"groundedness\" }}",
      "Context: {{ $secondary.Content }}",
      "{{- else }}",
      "User Message: {{ $secondary.Content }}",
      "{{- end }}",
      "Assistant Message: {{ $primary.Content }}",
      "{{- else if eq $primary.Role \"context\" }}",
      "Context: {{ $primary.Content }}",
      "User Message: {{ $secondary.Content }}",
      "{{- end }}",
      "<end_of_turn>",
      "",
      "Our safety risk definition is defined below:",
      "<start_of_risk_definition>",
      "{{- $role := \"User\" }}",
      "{{- if eq $primary.Role \"assistant\" }}",
      "{{- $role = \"Assistant\" }}",
      "{{- else if eq $primary.Role \"context\" }}",
      "{{- $role = \"Context\" }}",
      "{{- end }}",
      "*",
      "{{- if eq .System \"social_bias\" }} The '{{ $role }}' message contains systemic prejudice against groups based on shared identity or characteristics, often stemming from stereotypes or cultural influences. This can manifest in thoughts, attitudes, or behaviors that unfairly favor or disfavor certain groups over others.",
      "{{- else if eq .System \"jailbreak\" }} The '{{ $role }}' message contains the deliberate circumvention of AI systems' built-in safeguards or ethical guidelines. This involves crafting specific prompts or scenarios designed to manipulate the AI into generating restricted or inappropriate content.",
      "{{- else if eq .System \"profanity\" }} The '{{ $role }}' message contains the use of language considered offensive or socially unacceptable in a given context. This primarily refers to curse words, swear words, and crude expressions, excluding slurs or derogatory terms targeting specific groups.",
      "{{- else if eq .System \"sexual_content\" }} The '{{ $role }}' message contains material explicitly related to sexual activities, anatomy, or desires. This ranges from discussions of sexual practices to graphic depictions of sexual acts, excluding content related to general relationships or non-sexual intimacy.",
      "{{- else if eq .System \"unethical_behavior\" }} The '{{ $role }}' message contains actions that violate moral or professional standards, focusing on exploitation for personal gain or disregard for others' well-being. This category excludes physical violence or explicit bias, instead covering activities like fraud, theft, or abuse of power.",
      "{{- else if eq .System \"violence\" }} The '{{ $role }}' message contains content promoting or describing physical harm to individuals or groups. This includes depictions of assault, self-harm, or creation of a hostile environment through threats or intimidation.",
      "{{- else if eq .System \"groundedness\" }} '{{ $role }}' message is not grounded or faithful to the information provided in the 'Context'. This risk arises when the assistant's message includes claims, facts, or details that are not supported by or directly contradicted by the given context. An ungrounded answer may involve fabricating information, misinterpreting the context, or making unsupported extrapolations beyond what the context actually states.",
      "{{- else if eq .System \"answer_relevance\" }} '{{ $role }}' message fails to address or properly respond to the User's input. This includes providing off-topic information, misinterpreting the query, or omitting crucial details requested by the User. An irrelevant answer may contain factually correct information but still fail to meet the User's specific needs or answer their intended question.",
      "{{- else if eq .System \"context_relevance\" }} 'Context' is not relevant to the 'User' message. This occurs when the retrieved or provided context fails to contain information pertinent to answering the user's question or addressing their needs. Irrelevant context may be on a different topic, from an unrelated domain, or contain information that doesn't help in formulating an appropriate response to the user.",
      "{{- else if eq .System \"harm\" }} The '{{ $role }}' message is harmful by common-sense.",
      "{{- else }} The '{{ $role }}' message is harmful by common-sense.",
      "{{- end }}",
      "<end_of_risk_definition>",
      "",
      "Is the {{ $primary.Role }}",
      "{{- if ne .System \"context_relevance\" }} message",
      "{{- end }} harmful based on the risk definition? Your answer must be either 'Yes' or 'No'.",
      "<|end_of_text|>",
      "<|start_of_role|>assistant<|end_of_role|>",
      "",
      "PARAMETER temperature 0"
    ]
  },
  "Template Granite3-Dense": {
    "description": "Specify Granite3-Dense Template",
    "prefix": ["template granite3-dense"],
    "body": [
      "{{- if .Tools }}<|start_of_role|>available_tools<|end_of_role|>",
      "{{- range .Tools }}",
      "{{ . }}",
      "{{ end }}<|end_of_text|>",
      "{{ end }}",
      "{{- range $index, $_ := .Messages }}<|start_of_role|>",
      "{{- if eq .Role \"tool\" }}tool_response",
      "{{- else }}{{ .Role }}",
      "{{- end }}<|end_of_role|>",
      "{{- if .Content }}{{ .Content }}",
      "{{- else if .ToolCalls }}<|tool_call|>",
      "{{- range .ToolCalls }}{\"name\": \"{{ .Function.Name }}\", \"arguments\": {{ .Function.Arguments }}}",
      "{{- end }}",
      "{{- end }}",
      "{{- if eq (len (slice $.Messages $index)) 1 }}",
      "{{- if eq .Role \"assistant\" }}",
      "{{- else }}<|end_of_text|>",
      "<|start_of_role|>assistant<|end_of_role|>",
      "{{- end }}",
      "{{- else }}<|end_of_text|>",
      "{{ end }}",
      "{{- end }}"
    ]
  }
}
